{"version":3,"names":[],"mappings":"","sources":["build.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\n/* eslint-disable no-unused-expressions */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-undef */\n/* eslint-disable require-jsdoc */\n\nvar app = angular.module('Index', ['ngMaterial', 'ngMdIcons']);\n\nvar appIndex = new InvertedIndex(InvertedIndexUtility);\n\nvar uploaded = [];\nvar fileNames = [];\nvar inputArea = document.getElementById('upload-input');\nvar selectArea = document.getElementById('selected-files');\nvar uploadDone = document.getElementById('upload-done');\nvar uploadFailed = document.getElementById('upload-failed');\nvar cheating = document.getElementById('cheating');\n\nfunction invertedIndexController($scope, $mdSidenav, $mdDialog, $mdToast, $document, $timeout) {\n  /* eslint-disable no-param-reassign */\n  /* eslint-disable no-shadow */\n  /* eslint-disable no-use-before-define */\n  $scope.toggleLeft = buildToggler('left');\n  $scope.customFullscreen = false;\n  $scope.isOpenRight = openRight;\n  $scope.state = true;\n  $scope.showUploadBox = uploadBox;\n  $scope.closeDialog = dialogClose;\n  $scope.select = selectJson;\n  $scope.fileSelect = jsonChoose;\n  $scope.upload = uploadJson;\n  $scope.menu = uploaded;\n  $scope.createIndex = createIndex;\n  $scope.reference = appIndex.reference;\n  $scope.uploadedFileContents = appIndex.documentFiles;\n  $scope.search = searchIndex;\n  $scope.currentDocuments = [];\n  $scope.canUpload = false;\n  $scope.sidebarOpen = true;\n  $scope.selected = '';\n  $scope.changeState = function () {\n    /* eslint-disable no-unneeded-ternary */\n    $scope.state = $scope.state ? false : true;\n  };\n\n  $scope.changeStateAgain = function () {\n    $scope.state = false;\n  };\n\n  // menu toggler\n  function buildToggler(componentId) {\n    return function toggle() {\n      $mdSidenav(componentId).toggle();\n    };\n  }\n\n  // check open menu on page load\n  function openRight() {\n    return $mdSidenav('right').isOpen();\n  }\n\n  // upload file dialog box\n  function uploadBox($event) {\n    $mdDialog.show({\n      contentElement: '#myDialog',\n      parent: angular.element(document.body),\n      targetEvent: $event,\n      clickOutsideToClose: false,\n      fullscreen: $scope.customFullscreen\n    });\n    $scope.canUpload = false;\n  }\n\n  // close dialog box\n  function dialogClose() {\n    selectArea.innerHTML = '';\n    inputArea.value = '';\n    uploadDone.style.display = 'none';\n    uploadFailed.style.display = 'none';\n    $mdDialog.hide();\n    $scope.canUpload = false;\n  }\n\n  // select json files for upload\n  function selectJson() {\n    inputArea.click();\n    uploadDone.style.display = 'none';\n    uploadFailed.style.display = 'none';\n  }\n\n  // monitor input change\n  function jsonChoose() {\n    var validity = [];\n    cheating.style.display = 'none';\n    $scope.files = inputArea.files;\n    $scope.fileKeys = Object.keys($scope.files).filter(function (key) {\n      return key !== 'length';\n    });\n    $scope.filesSelected = $scope.fileKeys.map(function (file) {\n      return $scope.files[file].name;\n    });\n\n    selectArea.innerHTML = '';\n    new Promise(function (resolve, reject) {\n      $scope.filesSelected.forEach(function (item, index) {\n        /* eslint-disable no-nested-ternary */\n        var fileSize = $scope.files[index].size;\n        var color = '';\n        var message = '';\n        item.endsWith('.json') ? fileSize > 0 ? (color = 'good', message = 'valid file type') : (color = 'bad', message = 'empty json file') : fileSize > 0 ? (color = 'bad', message = 'invalid file type') : (color = 'bad', message = 'empty invalid file type');\n        validity.push(message);\n        selectArea.innerHTML += '<md-list-item><p> ' + item + ' \\n        <span class=\"message ' + color + '\"> ' + message + '</span></p></md-list-item>';\n      });\n      resolve(validity);\n    }).then(function () {\n      if (validity.indexOf('invalid file') !== -1 || validity.indexOf('empty invalid file') !== -1 || validity.indexOf('empty json file') !== -1 || validity.indexOf('file already uploaded') !== -1) {\n        $scope.$apply(function () {\n          $scope.canUpload = false;\n          selectArea.innerHTML += '<p style=\"text-align: center; color: #3004e0\">\\n          please select non-empty JSON file(s)</p>';\n        });\n      } else {\n        $scope.$apply(function () {\n          $scope.canUpload = true;\n        });\n      }\n    });\n  }\n\n  // upload json file(s) function\n  function uploadJson(e) {\n    var _this = this;\n\n    if ($scope.canUpload) {\n      (function () {\n        $scope.canUpload = false;\n        // create a FormData object which will be sent as the data payload in the\n        // AJAX request\n        var files = $(_this).get(0).files;\n        $scope.filesSelected.forEach(function (item) {\n          fileNames.push(item);\n        });\n        var formData = new FormData();\n\n        // loop through all the selected files and add them to the formData object\n        for (var i = 0; i < files.length; i += 1) {\n          /* eslint-disable prefer-const*/\n          var file = files[i];\n          // add the files to formData object for the data payload\n          formData.append('uploads[]', file, file.name);\n        }\n\n        // do ajax file upload\n        $.ajax({\n          url: '/upload',\n          type: 'POST',\n          data: formData,\n          processData: false,\n          contentType: false,\n          enctype: 'multipart/form-data',\n          success: function succeed(data) {\n            /* eslint-disable prefer-const */\n            /* eslint-disable no-restricted-syntax */\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n              for (var _iterator = files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var _file = _step.value;\n\n                uploaded.push({\n                  title: _file.name,\n                  icon: 'cloud_done',\n                  getindex: 'GET INDEX',\n                  createindex: 'CREATE INDEX'\n                });\n              }\n            } catch (err) {\n              _didIteratorError = true;\n              _iteratorError = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                  _iterator.return();\n                }\n              } finally {\n                if (_didIteratorError) {\n                  throw _iteratorError;\n                }\n              }\n            }\n\n            inputArea.value = '';\n            selectArea.innerHTML = '';\n            $timeout(function () {\n              $scope.isLoading = false;\n              uploadDone.style.display = 'block';\n              $scope.sidebarOpen ? $scope.toggleLeft() : null;\n              $scope.sidebarOpen = false;\n            }, 2000);\n          },\n          xhr: function theXhr() {\n            // create an XMLHttpRequest\n            var xhr = new XMLHttpRequest();\n            $scope.isLoading = true;\n            return xhr;\n          }\n        });\n      })();\n    } else {\n      inputArea.value = '';\n      selectArea.innerHTML = '';\n      cheating.style.display = 'block';\n    }\n  }\n\n  // show message on create index or get index\n  var showMessage = function showMessage(message) {\n    $mdToast.show($mdToast.simple().textContent(message).position('left').hideDelay(3000));\n  };\n\n  // create index function\n  function createIndex(b) {\n    var documentName = InvertedIndexUtility.formatFileName(b);\n    appIndex.createIndex(b).then(function (data) {\n      if (data === undefined) {\n        showMessage('Invalid Json File!');\n        $scope.title = 'Invalid Json File!';\n        $scope.headers = [];\n        $scope.words = {};\n        $timeout(function () {\n          document.getElementById('indextitle').style.display = 'none';\n          document.getElementById('badfile').style.display = 'block';\n          document.getElementById('indexresults').style.display = 'none';\n        }, 10);\n        document.getElementById(documentName + 'Create').innerHTML = 'INVALID FILE';\n      } else {\n        showMessage('Index Has Been Populated!');\n        $scope.title = documentName;\n        $scope.headers = Object.keys(appIndex.documentFiles[documentName]);\n        $scope.words = appIndex.reference[documentName];\n        if ($scope.currentDocuments.indexOf(documentName) === -1) {\n          $scope.currentDocuments.push(documentName);\n        }\n        $timeout(function () {\n          document.getElementById('badfile').style.display = 'none';\n          document.getElementById('indextitle').style.display = 'block';\n          document.getElementById('indexresults').style.display = 'block';\n        }, 10);\n        document.getElementById(documentName + 'Create').innerHTML = 'GET INDEX';\n      }\n    });\n  }\n\n  // search index function\n  function searchIndex(value, documentNames) {\n    var searchResults = appIndex.searchIndex(value, documentNames);\n    if (Object.keys(searchResults)[0] === 'No results found : please refine your search query') {\n      $scope.searchResults = {\n        'No results found : please refine your search query': ''\n      };\n      $timeout(function () {\n        document.getElementById('searchhead').style.display = 'none';\n      }, 10);\n    } else if (Object.keys(searchResults)[0] === 'Please enter search query and select index to search') {\n      $scope.searchResults = {\n        'Please enter search query and select index to search': ''\n      };\n      $timeout(function () {\n        document.getElementById('searchhead').style.display = 'none';\n      }, 10);\n    } else {\n      $scope.searchResults = searchResults;\n      $timeout(function () {\n        document.getElementById('searchhead').style.display = 'block';\n      }, 10);\n    }\n  }\n}\n\nfunction themeMaterial($mdThemingProvider) {\n  var customBlueMap = $mdThemingProvider.extendPalette('light-blue', {\n    contrastDefaultColor: 'light',\n    contrastDarkColors: ['50'],\n    500: 'rgb(16,108,200)',\n    50: 'ffffff'\n  });\n  $mdThemingProvider.definePalette('customBlue', customBlueMap);\n  $mdThemingProvider.theme('default').primaryPalette('customBlue', {\n    default: '500',\n    'hue-1': '50'\n  }).accentPalette('pink');\n  $mdThemingProvider.theme('input', 'default').primaryPalette('grey');\n}\n\napp.config(themeMaterial);\n\napp.controller('InvertedIndexController', invertedIndexController);\n\n/* eslint-disable arrow-body-style */\napp.directive('ngEnter', function () {\n  return function (scope, element, attrs) {\n    element.bind('keydown keypress', function (event) {\n      if (event.which === 13) {\n        scope.$apply(function () {\n          return scope.$eval(attrs.ngEnter);\n        });\n        event.preventDefault();\n      }\n    });\n  };\n});\n\n},{}]},{},[1]);\n"],"file":"build.js"}