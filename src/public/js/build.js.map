{"version":3,"names":[],"mappings":"","sources":["build.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\n/**\n* Helper Class for creating an inverted index.\n*/\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar InvertedIndexUtility = function () {\n  function InvertedIndexUtility() {\n    _classCallCheck(this, InvertedIndexUtility);\n  }\n\n  _createClass(InvertedIndexUtility, null, [{\n    key: 'unique',\n\n    /** remove array duplicates.\n    * @param {array} array - The array to be filtered.\n    * @returns {array} The filtered array.\n    */\n    value: function unique(array) {\n      if (Array.isArray(array)) {\n        var _ret = function () {\n          var checked = {};\n          return {\n            v: array.filter(function (item) {\n              if (!checked[item]) {\n                checked[item] = true;\n                return item;\n              }\n              return null;\n            })\n          };\n        }();\n\n        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n      }\n      return [];\n    }\n\n    /**\n    * JSON file reader.\n    * @param {string} url - The url of JSON file.\n    * @param {function} callback - the callback function\n    * takes in the responseData parameter as argument.\n    * @returns {function} The callback value.\n    */\n\n  }, {\n    key: 'getJSON',\n    value: function getJSON(url, callback) {\n      /* eslint-disable no-undef */\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', url, true);\n      xhr.responseType = 'json';\n      xhr.onreadystatechange = function changed() {\n        if (this.readyState === XMLHttpRequest.DONE) {\n          if (this.status === 200) {\n            return callback(this);\n          }\n        }\n        return this.statusText;\n      };\n      xhr.onerror = xhr.statusText;\n      xhr.send();\n    }\n\n    /**\n    * check if object is a valid json file.\n    * @param {object} jsonObject - The JSON file content.\n    * @returns {boolean} ans - The check for jsonObject validity.\n    */\n\n  }, {\n    key: 'isValidJson',\n    value: function isValidJson(jsonObject) {\n      var jsonObjectKeys = null;\n      var jsonObjectLength = null;\n      try {\n        jsonObjectKeys = Object.keys(jsonObject);\n        jsonObjectLength = jsonObjectKeys.length;\n      } catch (error) {\n        return false;\n      }\n      var count = 0;\n      var ans = true;\n      if (jsonObjectLength > 0) {\n        while (count < jsonObjectLength) {\n          var hasValidTitle = jsonObject[count].title !== undefined && jsonObject[count].title.length > 0 && typeof jsonObject[count].title === 'string';\n          var hasValidText = jsonObject[count].text !== undefined && jsonObject[count].text.length > 0 && typeof jsonObject[count].text === 'string';\n          if (!(hasValidTitle && hasValidText)) {\n            ans = false;\n            return ans;\n          }\n          count += 1;\n        }\n      } else {\n        ans = false;\n      }\n      return ans;\n    }\n\n    /**\n    * format file url to acceptable file name format.\n    * @param {string} url - the current file url.\n    * @returns {string} The new valid file name.\n    */\n\n  }, {\n    key: 'formatFileName',\n    value: function formatFileName(url) {\n      try {\n        var matcher = new RegExp(/\\/\\w+.json/, 'gi');\n        return matcher.exec(url).toString().slice(1);\n      } catch (error) {\n        throw error;\n      }\n    }\n\n    /**\n    * save file and sort docs in json.\n    * @param {object} jsonObject - a json object.\n    * @returns {object} an object containing he saved tokens and jsonObject.\n    */\n\n  }, {\n    key: 'saveTokens',\n    value: function saveTokens(jsonObject) {\n      var _this = this;\n\n      try {\n        var _ret2 = function () {\n          var tokens = {};\n          var words = [];\n          jsonObject.forEach(function (documentObject, index) {\n            var token = '';\n            token = documentObject.title + ' ' + documentObject.text;\n            var uniqueTokens = _this.unique(token.toLowerCase().match(/\\w+/g).sort());\n            tokens[index] = uniqueTokens;\n            words = words.concat(uniqueTokens);\n          });\n          return {\n            v: { tokens: tokens, jsonObject: jsonObject, words: words }\n          };\n        }();\n\n        if ((typeof _ret2 === 'undefined' ? 'undefined' : _typeof(_ret2)) === \"object\") return _ret2.v;\n      } catch (error) {\n        throw error;\n      }\n    }\n\n    /**\n    * populate the object reference and document attribute.\n    * @param {object} jsonObject - the jsonObject.\n    * @param {object} parent - the current (this) object.\n    * @param {string} theDocument - the current file name.\n    * @returns {object} The file indexes.\n    */\n\n  }, {\n    key: 'populateReference',\n    value: function populateReference(jsonObject, parent, theDocument) {\n      /* eslint-disable no-param-reassign */\n      /* eslint-disable no-unused-expression */\n      var jsonObjectKeys = Object.keys(jsonObject);\n      var jsonObjectKeysLength = jsonObjectKeys.length;\n      var index = 0;\n      parent.reference[theDocument] = {};\n      var tokenIndex = function tokenIndex() {\n        jsonObject[index].forEach(function (word) {\n          /* eslint-disable no-unused-expressions */\n          parent.reference[theDocument][word] !== undefined ? parent.reference[theDocument][word].push(index) : (parent.reference[theDocument][word] = [], parent.reference[theDocument][word].push(index));\n        });\n        index += 1;\n      };\n      while (index < jsonObjectKeysLength) {\n        tokenIndex();\n      }\n      parent.documentFiles[theDocument] = jsonObject;\n      return parent.reference[theDocument];\n    }\n\n    /** filter text input\n    * @param {string} value - the current search query(array or string).\n    * @returns {array} The filtered search query.\n    */\n\n  }, {\n    key: 'inputFIlter',\n    value: function inputFIlter(value) {\n      if (Array.isArray(value)) {\n        value = value.join(' ');\n      }\n      return value.toLowerCase().replace(/[^\\w\\s]/gi, '').split(' ').filter(function (item) {\n        return (/\\S/gi.test(item)\n        );\n      });\n    }\n  }]);\n\n  return InvertedIndexUtility;\n}();\n\nmodule.exports = InvertedIndexUtility;\n\n},{}],2:[function(require,module,exports){\n'use strict';\n\n/**\n * Class for creating an inverted index.\n */\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar InvertedIndex = function () {\n  /**\n  * Instantiate an inverted index object.\n  * @param {object} utility - The InvertedIndexHelper class.\n  */\n  function InvertedIndex(utility) {\n    _classCallCheck(this, InvertedIndex);\n\n    this.utility = utility;\n    this.reference = {};\n    this.documentFiles = {};\n    this.currentFile = [];\n    this.currentDocuments = [];\n    this.allWords = [];\n  }\n\n  /**\n  * Create an inverted index from file\n  * @param {string} url - The json file url.\n  * @returns {object} The reference object for current file.\n  */\n\n\n  _createClass(InvertedIndex, [{\n    key: 'createIndex',\n    value: function createIndex(url) {\n      var _this = this;\n\n      /* eslint-disable no-unused-vars */\n      /* eslint-disable consistent-return */\n      return new Promise(function (resolve, reject) {\n        _this.utility.getJSON(url, function (data) {\n          resolve(data.response);\n        });\n      }).then(function (jsonObject) {\n        try {\n          if (_this.utility.isValidJson(jsonObject)) {\n            var savedTokens = _this.utility.saveTokens(jsonObject);\n            var documentName = _this.utility.formatFileName(url);\n            _this.currentFile = jsonObject;\n            _this.utility.populateReference(savedTokens.tokens, _this, documentName);\n            _this.currentDocuments.push(documentName);\n            _this.allWords = _this.utility.unique(_this.allWords.concat(savedTokens.words));\n            return _this.reference[documentName];\n          }\n        } catch (error) {\n          throw error;\n        }\n      });\n    }\n\n    /**\n    * Get Created inverted index.\n    * @param {string} url - The file url of the json document.\n    * @returns {object} The reference object for current file.\n    */\n\n  }, {\n    key: 'getIndex',\n    value: function getIndex(url) {\n      var documentName = this.utility.formatFileName(url);\n      return this.reference[documentName];\n    }\n\n    /**\n    * Search the inverted index.\n    * @param {string} value - The current search query.\n    * @param {array} documentNames - an array of current files to searxh.\n    * @returns {object} An object with the accurate search results.\n    */\n\n  }, {\n    key: 'searchIndex',\n    value: function searchIndex(value, documentNames) {\n      var _this2 = this;\n\n      /* eslint-disable no-unused-expressions */\n      /* eslint-disable no-unused-vars */\n      /* eslint-disable no-nested-ternary */\n      this.searchReturn = {};\n      if (value !== (null || undefined)) {\n        if (documentNames === undefined || documentNames.length < 1 || documentNames === '') {\n          documentNames = this.currentDocuments;\n        }\n        this.utility.inputFIlter(value).filter(function (word) {\n          return _this2.allWords.indexOf(word) !== -1;\n        }).forEach(function (word) {\n          documentNames.forEach(function (documentFile) {\n            var docKeys = Object.keys(_this2.reference[documentFile]);\n            _typeof(_this2.searchReturn[documentFile]) === 'object' && !Array.isArray(_this2.searchReturn[documentFile]) ? docKeys.indexOf(word) !== -1 ? _this2.searchReturn[documentFile][word] = _this2.reference[documentFile][word] : null : docKeys.indexOf(word) !== -1 ? (_this2.searchReturn[documentFile] = {}, _this2.searchReturn[documentFile][word] = _this2.reference[documentFile][word]) : null;\n          });\n        });\n        if (Object.keys(this.searchReturn).length < 1) {\n          return { 'No results found : please refine your search query': '' };\n        }\n        return this.searchReturn;\n      }\n      return { 'Please enter search query and select index to search': '' };\n    }\n  }]);\n\n  return InvertedIndex;\n}();\n\nmodule.exports = InvertedIndex;\n\n},{}],3:[function(require,module,exports){\n'use strict';\n\n/* eslint-disable no-unused-expressions */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-undef */\n\nvar InvertedIndex = require('./Inverted-index.js');\n\nvar Utility = require('./Inverted-Index-Helper.js');\n\nvar app = angular.module('Index', ['ngMaterial', 'ngMdIcons']);\n\nvar appIndex = new InvertedIndex(Utility);\n\nvar uploaded = [];\nvar fileNames = [];\nvar inputArea = document.getElementById('upload-input');\nvar selectArea = document.getElementById('selected-files');\nvar uploadDone = document.getElementById('upload-done');\nvar uploadFailed = document.getElementById('upload-failed');\nvar cheating = document.getElementById('cheating');\n\nfunction invertedIndexController($scope, $mdSidenav, $mdDialog, $mdToast, $document, $timeout) {\n  /* eslint-disable no-param-reassign */\n  /* eslint-disable no-shadow */\n  /* eslint-disable no-use-before-define */\n  $scope.toggleLeft = buildToggler('left');\n  $scope.customFullscreen = false;\n  $scope.isOpenRight = openRight;\n  $scope.state = true;\n  $scope.showUploadBox = uploadBox;\n  $scope.closeDialog = dialogClose;\n  $scope.select = selectJson;\n  $scope.fileSelect = jsonChoose;\n  $scope.upload = uploadJson;\n  $scope.menu = uploaded;\n  $scope.createIndex = createIndex;\n  $scope.reference = appIndex.reference;\n  $scope.uploadedFileContents = appIndex.documentFiles;\n  $scope.search = searchIndex;\n  $scope.currentDocuments = [];\n  $scope.canUpload = false;\n  $scope.sidebarOpen = true;\n  $scope.selected = '';\n  $scope.changeState = function () {\n    /* eslint-disable no-unneeded-ternary */\n    $scope.state = $scope.state ? false : true;\n  };\n\n  $scope.changeStateAgain = function () {\n    $scope.state = false;\n  };\n\n  // menu toggler\n  function buildToggler(componentId) {\n    return function toggle() {\n      $mdSidenav(componentId).toggle();\n    };\n  }\n\n  // check open menu on page load\n  function openRight() {\n    return $mdSidenav('right').isOpen();\n  }\n\n  // upload file dialog box\n  function uploadBox($event) {\n    $mdDialog.show({\n      contentElement: '#myDialog',\n      parent: angular.element(document.body),\n      targetEvent: $event,\n      clickOutsideToClose: false,\n      fullscreen: $scope.customFullscreen\n    });\n    $scope.canUpload = false;\n  }\n\n  // close dialog box\n  function dialogClose() {\n    selectArea.innerHTML = '';\n    inputArea.value = '';\n    uploadDone.style.display = 'none';\n    uploadFailed.style.display = 'none';\n    $mdDialog.hide();\n    $scope.canUpload = false;\n  }\n\n  // select json files for upload\n  function selectJson() {\n    inputArea.click();\n    uploadDone.style.display = 'none';\n    uploadFailed.style.display = 'none';\n  }\n\n  // monitor input change\n  function jsonChoose() {\n    var validity = [];\n    cheating.style.display = 'none';\n    $scope.files = inputArea.files;\n    $scope.fileKeys = Object.keys($scope.files).filter(function (key) {\n      return key !== 'length';\n    });\n    $scope.filesSelected = $scope.fileKeys.map(function (file) {\n      return $scope.files[file].name;\n    });\n\n    selectArea.innerHTML = '';\n    new Promise(function (resolve, reject) {\n      $scope.filesSelected.forEach(function (item, index) {\n        /* eslint-disable no-nested-ternary */\n        var fileSize = $scope.files[index].size;\n        var color = '';\n        var message = '';\n        item.endsWith('.json') ? fileSize > 0 ? (color = 'good', message = 'valid file type') : (color = 'bad', message = 'empty json file') : fileSize > 0 ? (color = 'bad', message = 'invalid file type') : (color = 'bad', message = 'empty invalid file type');\n        validity.push(message);\n        selectArea.innerHTML += '<md-list-item><p> ' + item + ' \\n        <span class=\"message ' + color + '\"> ' + message + '</span></p></md-list-item>';\n      });\n      resolve(validity);\n    }).then(function () {\n      if (validity.indexOf('invalid file') !== -1 || validity.indexOf('empty invalid file') !== -1 || validity.indexOf('empty json file') !== -1 || validity.indexOf('file already uploaded') !== -1) {\n        $scope.$apply(function () {\n          $scope.canUpload = false;\n          selectArea.innerHTML += '<p style=\"text-align: center; color: #3004e0\">\\n          please select non-empty JSON file(s)</p>';\n        });\n      } else {\n        $scope.$apply(function () {\n          $scope.canUpload = true;\n        });\n      }\n    });\n  }\n\n  // upload json file(s) function\n  function uploadJson(e) {\n    var _this = this;\n\n    if ($scope.canUpload) {\n      (function () {\n        $scope.canUpload = false;\n        // create a FormData object which will be sent as the data payload in the\n        // AJAX request\n        var files = $(_this).get(0).files;\n        $scope.filesSelected.forEach(function (item) {\n          fileNames.push(item);\n        });\n        var formData = new FormData();\n\n        // loop through all the selected files and add them to the formData object\n        for (var i = 0; i < files.length; i += 1) {\n          /* eslint-disable prefer-const*/\n          var file = files[i];\n          // add the files to formData object for the data payload\n          formData.append('uploads[]', file, file.name);\n        }\n\n        // do ajax file upload\n        $.ajax({\n          url: '/upload',\n          type: 'POST',\n          data: formData,\n          processData: false,\n          contentType: false,\n          enctype: 'multipart/form-data',\n          success: function succeed(data) {\n            /* eslint-disable prefer-const */\n            /* eslint-disable no-restricted-syntax */\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n              for (var _iterator = files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var _file = _step.value;\n\n                uploaded.push({\n                  title: _file.name,\n                  icon: 'cloud_done',\n                  getindex: 'GET INDEX',\n                  createindex: 'CREATE INDEX'\n                });\n              }\n            } catch (err) {\n              _didIteratorError = true;\n              _iteratorError = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                  _iterator.return();\n                }\n              } finally {\n                if (_didIteratorError) {\n                  throw _iteratorError;\n                }\n              }\n            }\n\n            inputArea.value = '';\n            selectArea.innerHTML = '';\n            $timeout(function () {\n              $scope.isLoading = false;\n              uploadDone.style.display = 'block';\n              $scope.sidebarOpen ? $scope.toggleLeft() : null;\n              $scope.sidebarOpen = false;\n            }, 2000);\n          },\n          xhr: function theXhr() {\n            // create an XMLHttpRequest\n            var xhr = new XMLHttpRequest();\n            $scope.isLoading = true;\n            return xhr;\n          }\n        });\n      })();\n    } else {\n      inputArea.value = '';\n      selectArea.innerHTML = '';\n      cheating.style.display = 'block';\n    }\n  }\n\n  // show message on create index or get index\n  var showMessage = function showMessage(message) {\n    $mdToast.show($mdToast.simple().textContent(message).position('left').hideDelay(3000));\n  };\n\n  // create index function\n  function createIndex(b) {\n    var documentName = Utility.formatFileName(b);\n    appIndex.createIndex(b).then(function (data) {\n      if (data === undefined) {\n        showMessage('Invalid Json File!');\n        $scope.title = 'Invalid Json File!';\n        $scope.headers = [];\n        $scope.words = {};\n        $timeout(function () {\n          document.getElementById('indextitle').style.display = 'none';\n          document.getElementById('badfile').style.display = 'block';\n          document.getElementById('indexresults').style.display = 'none';\n        }, 10);\n        document.getElementById(documentName + 'Create').innerHTML = 'INVALID FILE';\n      } else {\n        showMessage('Index Has Been Populated!');\n        $scope.title = documentName;\n        $scope.headers = Object.keys(appIndex.documentFiles[documentName]);\n        $scope.words = appIndex.reference[documentName];\n        if ($scope.currentDocuments.indexOf(documentName) === -1) {\n          $scope.currentDocuments.push(documentName);\n        }\n        $timeout(function () {\n          document.getElementById('badfile').style.display = 'none';\n          document.getElementById('indextitle').style.display = 'block';\n          document.getElementById('indexresults').style.display = 'block';\n        }, 10);\n        document.getElementById(documentName + 'Create').innerHTML = 'GET INDEX';\n      }\n    });\n  }\n\n  // search index function\n  function searchIndex(value, documentNames) {\n    var searchResults = appIndex.searchIndex(value, documentNames);\n    if (Object.keys(searchResults)[0] === 'No results found : please refine your search query') {\n      $scope.searchResults = {\n        'No results found : please refine your search query': ''\n      };\n      $timeout(function () {\n        document.getElementById('searchhead').style.display = 'none';\n      }, 10);\n    } else if (Object.keys(searchResults)[0] === 'Please enter search query and select index to search') {\n      $scope.searchResults = {\n        'Please enter search query and select index to search': ''\n      };\n      $timeout(function () {\n        document.getElementById('searchhead').style.display = 'none';\n      }, 10);\n    } else {\n      $scope.searchResults = searchResults;\n      $timeout(function () {\n        document.getElementById('searchhead').style.display = 'block';\n      }, 10);\n    }\n  }\n}\n\nfunction themeMaterial($mdThemingProvider) {\n  var customBlueMap = $mdThemingProvider.extendPalette('light-blue', {\n    contrastDefaultColor: 'light',\n    contrastDarkColors: ['50'],\n    500: 'rgb(16,108,200)',\n    50: 'ffffff'\n  });\n  $mdThemingProvider.definePalette('customBlue', customBlueMap);\n  $mdThemingProvider.theme('default').primaryPalette('customBlue', {\n    default: '500',\n    'hue-1': '50'\n  }).accentPalette('pink');\n  $mdThemingProvider.theme('input', 'default').primaryPalette('grey');\n}\n\napp.config(themeMaterial);\n\napp.controller('InvertedIndexController', invertedIndexController);\n\n/* eslint-disable arrow-body-style */\napp.directive('ngEnter', function () {\n  return function (scope, element, attrs) {\n    element.bind('keydown keypress', function (event) {\n      if (event.which === 13) {\n        scope.$apply(function () {\n          return scope.$eval(attrs.ngEnter);\n        });\n        event.preventDefault();\n      }\n    });\n  };\n});\n\n},{\"./Inverted-Index-Helper.js\":1,\"./Inverted-index.js\":2}]},{},[3]);\n"],"file":"build.js"}